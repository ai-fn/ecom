stages:
  - test
  - deploy
  - dev-test
  - dev-deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - echo "Configuring SSH..."
  - mkdir -p ~/.ssh/
  - echo "$SSH_KEY" > ~/.ssh/gitlab
  - echo "$SSH_KEY" > ~/.ssh/gitlab
  - chmod 600 ~/.ssh/gitlab
  - echo "Host target-shop" > ${SSH_CONFIG_FILEPATH}
  - echo "  HostName $SSH_HOST" >> ${SSH_CONFIG_FILEPATH}
  - echo "  User $SSH_USER" >> ${SSH_CONFIG_FILEPATH}
  - echo "  IdentityFile ~/.ssh/gitlab" >> ${SSH_CONFIG_FILEPATH}
  - echo "  LogLevel ERROR" >> ${SSH_CONFIG_FILEPATH}
  - echo "  StrictHostKeyChecking no" >> ${SSH_CONFIG_FILEPATH}

test:
  stage: test
  tags:
    - backend
  only:
    - main

  script:
    - set -e
    - echo "Running tests..."
    - ssh -F ${SSH_CONFIG_FILEPATH} target-shop "
      if [ -d ${MAIN_TEST_DIR} ]; then 
        cd ${MAIN_TEST_DIR} && git pull https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.altawest.ru/${CI_PROJECT_PATH}.git main;
      else
        git clone --single-branch --branch main https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.altawest.ru/${CI_PROJECT_PATH}.git ${MAIN_TEST_DIR} && cd ${MAIN_TEST_DIR}; 
      fi &&
      mkdir -p ./data/elasticsearch &&
      sudo chown -R 1000:1000 ./data/elasticsearch &&
      sudo chmod -R 755 ./data/elasticsearch &&
      docker compose -f ${MAIN_TEST_COMPOSE_FILE} up --build -d &&
      docker compose -f ${MAIN_TEST_COMPOSE_FILE} exec web python manage.py migrate --settings=${DEV_SETTING_MODULE} &&
      docker compose -f ${MAIN_TEST_COMPOSE_FILE} logs web &&
      docker compose -f ${MAIN_TEST_COMPOSE_FILE} exec web ./wait-for-it.sh elasticsearch:9200 --timeout=120 --strict -- python manage.py test --settings=${DEV_SETTING_MODULE} --no-input || exit 1"
  after_script:
    - ssh -F ${SSH_CONFIG_FILEPATH} target-shop "docker compose -f ${MAIN_TEST_DIR}/${MAIN_TEST_COMPOSE_FILE} down"

deploy:
  stage: deploy
  tags:
    - backend
  only:
    - main
  script:
    - set -e
    - echo "Running deploy..."
    - ssh -F ${SSH_CONFIG_FILEPATH} target-shop "cd ${MAIN_DIR} &&
      docker compose -f ${MAIN_COMPOSE_FILE} down --timeout 30 &&
      git pull https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.altawest.ru/${CI_PROJECT_PATH}.git main &&
      docker compose -f ${MAIN_COMPOSE_FILE} build &&
      docker compose -f ${MAIN_COMPOSE_FILE} up -d --force-recreate &&
      docker compose exec web python manage.py migrate --settings=${MAIN_SETTING_MODULE}"
  needs:
    - test

dev-test:
  stage: dev-test
  tags:
    - backend
  only:
    - dev

  script:
    - echo "Running dev-tests..."
    - ssh -F ${SSH_CONFIG_FILEPATH} target-shop "
      if [ -d ${DEV_TEST_DIR} ]; then
      cd ${DEV_TEST_DIR} && git pull https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.altawest.ru/${CI_PROJECT_PATH}.git dev;
      else
      git clone --single-branch --branch dev https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.altawest.ru/${CI_PROJECT_PATH}.git ${DEV_TEST_DIR} && cd ${DEV_TEST_DIR};
      fi &&
      mkdir -p ./data/elasticsearch &&
      sudo chown -R 1000:1000 ./data/elasticsearch &&
      sudo chmod -R 755 ./data/elasticsearch &&
      docker compose -f ${DEV_TEST_COMPOSE_FILE} up --build -d &&
      docker compose -f ${DEV_TEST_COMPOSE_FILE} exec web python manage.py migrate --settings=${DEV_SETTING_MODULE} &&
      docker compose -f ${DEV_TEST_COMPOSE_FILE} logs web &&
      docker compose -f ${DEV_TEST_COMPOSE_FILE} exec web ./wait-for-it.sh elasticsearch:9200 --timeout=120 --strict -- python manage.py test --settings=${DEV_SETTING_MODULE} --no-input || exit 1"
  after_script:
    - ssh -F ${SSH_CONFIG_FILEPATH} target-shop "docker compose -f ${DEV_TEST_DIR}/${DEV_TEST_COMPOSE_FILE} down"

dev-deploy:
  stage: dev-deploy
  tags:
    - backend
  only:
    - dev
  script:
    - set -e
    - echo "Running dev-deploy..."
    - ssh -F ${SSH_CONFIG_FILEPATH} target-shop "cd ${DEV_DIR} &&
      docker compose -f ${DEV_MAIN_COMPOSE_FILE} down --timeout 30 &&
      git pull https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.altawest.ru/${CI_PROJECT_PATH}.git dev &&
      docker compose -f ${DEV_MAIN_COMPOSE_FILE} build &&
      docker compose -f ${DEV_MAIN_COMPOSE_FILE} up -d --force-recreate &&
      docker compose exec web python manage.py migrate --settings=${DEV_SETTING_MODULE}"
  needs:
    - dev-test
