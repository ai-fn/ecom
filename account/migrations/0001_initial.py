# Generated by Django 4.2.11 on 2024-06-25 14:01

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=35, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=35, null=True, verbose_name='Фамилия ')),
                ('email', models.EmailField(blank=True, help_text='Адрес электронной почты', max_length=254, null=True, verbose_name='Почта')),
                ('phone', models.CharField(blank=True, help_text='In format +7xxxxxxxxxx', max_length=16, null=True, unique=True, verbose_name='Номер телефона')),
                ('address', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Адрес')),
                ('is_customer', models.BooleanField(default=False, verbose_name='Покупатель ли юзер?')),
                ('email_confirmed', models.BooleanField(default=False, verbose_name='Подтверждена ли почта')),
                ('middle_name', models.CharField(blank=True, max_length=35, null=True, verbose_name='Отчество')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, null=True, verbose_name='Город')),
                ('domain', models.CharField(max_length=255, null=True, verbose_name='Домен')),
                ('address', models.CharField(max_length=256, null=True, verbose_name='Адрес')),
                ('number', models.BigIntegerField(default=0, verbose_name='Номер телефона')),
                ('how_to_get_office', models.CharField(max_length=512, null=True, verbose_name='Как добраться до офиса')),
                ('schedule', models.TextField(default='Отсутствует', verbose_name='График работы')),
                ('nominative_case', models.CharField(blank=True, max_length=128, null=True, verbose_name='Именительный падеж')),
                ('genitive_case', models.CharField(blank=True, max_length=128, null=True, verbose_name='Родительный падеж')),
                ('dative_case', models.CharField(blank=True, max_length=128, null=True, verbose_name='Дательный падеж')),
                ('accusative_case', models.CharField(blank=True, max_length=128, null=True, verbose_name='Винительный падеж')),
                ('instrumental_case', models.CharField(blank=True, max_length=128, null=True, verbose_name='Творительный падеж')),
                ('prepositional_case', models.CharField(max_length=128, null=True, verbose_name='Предложный падеж')),
                ('population', models.PositiveBigIntegerField(default=0, verbose_name='Численность населения')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='CityGroup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название группы')),
                ('cities', models.ManyToManyField(related_name='city_group', to='account.city', verbose_name='Города')),
                ('main_city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='main_city_for_group', to='account.city', verbose_name='Главный город')),
            ],
            options={
                'verbose_name': 'Группа городов',
                'verbose_name_plural': 'Группы городов',
            },
        ),
        migrations.AddIndex(
            model_name='city',
            index=models.Index(fields=['name'], name='city_name_idx'),
        ),
        migrations.AddIndex(
            model_name='city',
            index=models.Index(fields=['domain'], name='city_domain_idx'),
        ),
        migrations.AddIndex(
            model_name='city',
            index=models.Index(fields=['address'], name='city_address_idx'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='citygroup',
            index=models.Index(fields=['name'], name='citygroup_name_idx'),
        ),
        migrations.AddIndex(
            model_name='citygroup',
            index=models.Index(fields=['main_city'], name='citygroup_main_city_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['phone'], name='customuser_phone_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['address'], name='customuser_address_idx'),
        ),
    ]
