services:
  db:
    image: postgres:14.5
    restart: always
    volumes:
      - ./data/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=megashop
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1askas-0gak2m1-,d21p

  cache:
    image: redis:7.0.4
    restart: always
    volumes:
      - ./data/cache:/data
    ports:
      - "${REDIS_PORT}:6379"

  web:
    build: .
    command: [ "./wait-for-it.sh", "${POSTGRES_HOST}:5432", "--strict", "--timeout=30", "--", "gunicorn", "--workers=3", "--bind=unix:/code/gunicorn.sock", "megashop.wsgi:application" ]
    restart: always
    volumes:
      - .:/code
    environment:
      - DJANGO_SETTINGS_MODULE=megashop.settings.local
      - POSTGRES_DB=megashop
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1askas-0gak2m1-,d21p
    depends_on:
      - db
    logging:
      driver: loki
      options:
        loki-url: http://147.45.106.166:3100/loki/api/v1/push
        loki-external-labels: job=dockerlogs,owner=megashop-backend,environment=development
  
  celery:
    build: .
    command: celery -A megashop worker --loglevel=info --beat
    restart: always
    volumes:
      - .:/code
    environment:
      - DJANGO_SETTINGS_MODULE=megashop.settings.local
      - POSTGRES_DB=megashop
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1askas-0gak2m1-,d21p
    depends_on:
      - db
      - cache

  celerybeat:
    build: .
    command: celery -A megashop beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    restart: always
    volumes:
      - .:/code
      - ./data/celerybeat:/var/lib/celerybeat  # Папка для хранения файлов состояния планировщика
    environment:
      - DJANGO_SETTINGS_MODULE=megashop.settings.local
      - POSTGRES_DB=megashop
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1askas-0gak2m1-,d21p
    depends_on:
      - db
      - cache

  nginx:
    image: nginx:1.23.1
    restart: always
    volumes:
      - ./config/nginx:/etc/nginx/templates
      - ./static:/code/static
      - ./media:/code/media
      - .:/code
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web

  prometheus:
    image: prom/prometheus:v2.30.0
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"
    depends_on:
      - web
      - db
      - cache
      - nginx

  elasticsearch:
    image: elasticsearch:7.17.0
    environment:
      - "discovery.type=zen"  # Используйте Zen Discovery для продакшен-кластеров
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"  # Настройте Java-параметры в соответствии с вашей средой
      - "xpack.security.enabled=true"
      - "ELASTIC_PASSWORD=${ELASTIC_PASSWORD}"
      - "bootstrap.memory_lock=true"  # Предотвратить своппинг Elasticsearch
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_HTTP_PORT}:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 1m
      timeout: 10s
      retries: 5
